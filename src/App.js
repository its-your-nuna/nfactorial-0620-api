import { useEffect, useState } from "react";
import "./App.css";
import axios from "axios";
import { TodoistApi } from '@doist/todoist-api-typescript'

const api = new TodoistApi('0fbb9931fdc0180d30c59c2a8ec4626a8b50865d')


function App() {
  /*
  
    GET ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
    POST ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
    PUT ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
    DELETE ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞

  */
  const [itemToAdd, setItemToAdd] = useState("");
  const [items, setItems] = useState([]);
  const [searchValue, setSearchValue] = useState("");
  const [filterType, setFilterType] = useState('active')
  const [isdone,setDone]= useState([])
  const buttons = [
    {
      type: "active",
      label: "Active",
    },
    {
      type: "done",
      label: "Done",
    },
  ];
  const changevalue=()=>{
    api.reopenTask(5464358139)
    .then((isSuccess) => console.log(isSuccess))
    .catch((error) => console.log(error))

  };
  useEffect(() => {
    api.getTasks()
      .then((tasks) => {
        console.log(tasks)
        setItems(tasks)
      })
    getAllItems();
  
  }, []);


  const handleChangeItem = (event) => {
    setItemToAdd(event.target.value);
  };

  const handleAddItem = () => {
    api.addTask({
      content: itemToAdd,
    })
      .then((task) =>
        setItems([...items, task]))
      .catch((error) => console.log(error))
    setItemToAdd("");
  };


  const toggleItemDone = (item) => {

    const { id, done, task_id } = item
    console.log(id,done, task_id)

    if(filterType==='done'){

      api.reopenTask(task_id)
      .then((isSuccess) => 
      {
      setItems([...items, item]);
      setDone(isdone.filter((done) => {
        return (done.id !== id) 
      }))})
      .catch((error) => console.log(error))
    }else{
      api.closeTask(id)
      .then((isSuccess) => {
        if (isSuccess) {
          setItems(items.map((item) => {
            if (item.id === id) {
              return {
                ...item,
                done: !done
              }
            }
            return item
          }))
        }
        console.log(isSuccess)
      }
      )
      .catch((error) => console.log(error))
    }
   
  }



 

  const getAllItems = () => {
    axios.get('https://api.todoist.com/sync/v8/completed/get_all', {
      headers: {
        Authorization:
          "Bearer 0fbb9931fdc0180d30c59c2a8ec4626a8b50865d"
      }
    }).then((res)=>res.data)
    .then((res)=>{
      console.log(res.items)
      setDone(res.items)
    })
  }

  const handleFilterItems=(type)=>{
    setFilterType(type)
  }
  const filterItem= filterType==='active'?items:
  filterType==='done'?isdone:
  items.filter((item)=>!item.done)

  return (
    <div className="todo-app">
      App-header
      <div className="app-header d-flex">
        <h1>Todo List</h1>
      </div>

      <div className="top-panel d-flex">
        {/* Search-panel */}
        <input
          type="text"
          className="form-control search-input"
          placeholder="type to search"
          value={searchValue}
          onChange={(event) => setSearchValue(event.target.value)}
        />
      </div>
      <div className="btn-group">
        {buttons.map((item) => (
          <button onClick={() => handleFilterItems(item.type)}
            key={item.label}
            type="button"
            className={`btn btn-${filterType !== item.type ? "outline-" : ""
              }info`}>
            {item.label}
          </button>
        ))}

      </div>
      {/* List-group */}
      <ul className="list-group todo-list">

        {items.length > 0 ? (
          filterItem.map((item) => (
            <li key={item.id} className="list-group-item">
              <span className={`todo-list-item${item && item.done ? " done" : ""}`}>
                <span
                  className="todo-list-item-label"
                  onClick={() => toggleItemDone(item)}
                >
                  {item.content}
                </span>
              </span>
            </li>
          ))
        ) : (
          <div>No todosü§§</div>
        )}
      </ul>

      {/* Add form */}
      <div className="item-add-form d-flex">
        <input
          value={itemToAdd}
          type="text"
          className="form-control"
          placeholder="What needs to be done"
          onChange={handleChangeItem}
        />
        <button className="btn btn-outline-secondary" onClick={handleAddItem}>
          Add item
        </button>
      </div>
    </div>
  );
}

export default App;
// axios.get(`${api}`).then((response) => {
//       console.log(response.data);
//   })

/*–ù–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
 –ø–æ–ª—É—á–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API. –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º 
 —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ axios, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ Promise HTTP-–∫–ª–∏–µ–Ω—Ç–∞.
 Axios - –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ JavaScript, 
 –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ */

/*API (Application programming interface) ‚Äî —ç—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, 
–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞. ¬´–ö–æ –º–Ω–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è 
—Ç–∞–∫ –∏ —Ç–∞–∫, —è –æ–±—è–∑—É—é—Å—å –¥–µ–ª–∞—Ç—å —Ç–æ –∏ —ç—Ç–æ¬ª.

–ö–æ–Ω—Ç—Ä–∞–∫—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
    —Å–∞–º—É –æ–ø–µ—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –º—ã –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å,
    –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ –≤—Ö–æ–¥,
    –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞ –≤—ã—Ö–æ–¥–µ (–∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ).
 */
/*

  1. data - —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–µ—Ä–≤–µ—Ä–æ–º.
   –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è JSON, Axios –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç 
   –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç JavaScript.
  2.  status - –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è HTTP –∏–∑ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 200 , 400 , 404 .
  3.  statusText - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ HTTP –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞, 
  –Ω–∞–ø—Ä–∏–º–µ—Ä OK , Bad Request , Not Found .
  4. headers - –∑–∞–≥–æ–ª–æ–≤–∫–∏ HTTP, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç.
  5.  config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è API Axios –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
  6.  request - –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç. 
  –í Node.js —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç ClientRequest –í –±—Ä–∞—É–∑–µ—Ä–µ
   —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç XMLHTTPRequest
 */
